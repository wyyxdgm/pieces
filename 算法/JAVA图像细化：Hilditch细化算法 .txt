                                                        JAVA图像细化：Hilditch细化算法 
理论：
 
Hilditch 细化算法的步骤为：
 
Hilditch 细化算法是经典的二值图像细化算法，然而，在网上却很难找到一个详细、正确的介绍和实现。可以找到一辆个 Hilditch 算法的C实现，但缺乏注释，代码可读性也很差。在期刊网上找到几篇论文，提及了Hilditch 算法，结果一篇说的罗哩罗嗦根本看不懂，另一篇说的说的易懂，却是错误的！拿来主义是行不通了，于是只好结合着这几个论文和代码，从头写 Hilditch 细化算法。
 
假设像素p的3×3邻域结构为：
 


Hilditch 细化算法的步骤为：
 
对图像从左向右从上向下迭代每个像素，是为一个迭代周期。在每个迭代周期中，对于每一个像素p，如果它同时满足6个条件，则标记它。在当前迭代周期结束时，则把所有标记的像素的值设为背景值。如果某次迭代周期中不存在标记点（即满足6个条件的像素），则算法结束。假设背景值为0，前景值为1，则：
 
6个条件为：
 
（I）：p 为1，即p不是背景；
 
（2）：x1,x3,x5,x7不全部为1（否则把p标记删除，图像空心了）；
 
（3）：x1~x8 中，至少有2个为1（若只有1个为1，则是线段的端点。若没有为1的，则为孤立点）；
 
（4）：p的8连通联结数为1；
 
联结数指在像素p的3*3邻域中，和p连接的图形分量的个数：
 


上图中，左图的4连通联结数是2，8连通联结数是1，而右图的4联通联结数和8联通联结数都是2。
 








4连通联结数计算公式是：
 


8连通联结数计算公式是：
 
其中，
 


至于公式怎么来的就不管了，直接用就行了。
 
（5）假设x3已经标记删除，那么当x3为0时，p的8联通联结数为1；
 
（6）假设x5已经标记删除，那么当x5为0时，p的8联通联结数为1。
 
======
 
在程序中，我使用的是这样的邻域编码：
 



/*
 
以上理论是抄写别人的，网址是 http://www.cnblogs.com/xiaotie/archive/2010/08/12/1797760.html，
 
本文使用二维数组标记的0,1,0代表背景色，1代表前景色；thin[h][w];h代表高度，w代表宽度；
 
thin[h][w];全局变量，要提前定义好，本文使用如下点
 
          p3 p2 p1
           p4 p   p0
           p5 p6 p7
 
*/
 
//本函数用于实现条件4，判断8联通节点数；
 
public int   DetectConnectivity(int[] a)
 {
 int size=0;
 int a0,a1,a2,a3,a4,a5,a6,a7;
 a0=1-a[0];
 a1=1-a[1];
 a2=1-a[2];
 a3=1-a[3];
 a4=1-a[4];
 a5=1-a[5];
 a6=1-a[6];
 a7=1-a[7];
 size=a0-a0*a1*a2+a2-a2*a3*a4+a4-a4*a5*a6+a6-a6*a7*a0;
 return size;
 }
 
//细化函数；
 
public   void    thinExtract()
 { 

Vector<Point> mark=new Vector<Point>();//用于标记要删除的点的x和y坐标；
 boolean IsModified = true;  
int Counter = 1; 
  int[] nnb = new int[8];
   //去掉边框像素  
  for( int i=0;i<w;i++)
   {
    thin[0][i]=0;
    thin[h-1][i]=0;
   }
   for( int i=0;i<h;i++)
   {
    thin[i][0]=0;
    thin[i][w-1]=0;
   }
 
do  
       {  
       Counter++;  
      IsModified = false;
 
     //每次周期循环判断前，先将数组中被标记的点变成0；
       for(int i=0;i<mark.size();i++)
       {
          Point p=mark.get(i);
          thin[p.x][p.y]=0;
       }
       mark.clear();//将向量清空
        int [][] nb=new int [3][3];
     for(int i=0;i<h;i++)
     {
      for(int j=0;j<w;j++)
      {
       //条件1必须为黑点  
      if(thin[i][j]!=1)
        continue;
       //赋值3*3领域
       for(int m=0;m<3;m++)
       {
        for(int n=0;n<3;n++)
        {
         nb[m][n]=thin[i-1+m][j-1+n];
        }
       }
       //复制
         nnb[0] = nb[1][2];
          nnb[1] = nb[0][2];
          nnb[2] = nb[0][1];
          nnb[3] = nb[0][0];
          nnb[4] = nb[1][0];
          nnb[5] = nb[2][0];
          nnb[6] = nb[2][1];
          nnb[7] = nb[2][2];
           // 条件2：p0,p2,p4,p6 不皆为前景点  ，4邻域点不能全为1； 
      if (nnb[0] == 1 && nnb[2] == 1 && nnb[4] == 1 && nnb[6] == 1) 
      {
        continue;
       }
    // 条件3: p0~p7至少两个是前景点   ，8邻域至少有2个点为1；
       int icount=0;
      for (int ii = 0; ii < 8; ii++)  
     {
       icount += nnb[ii];   
     }
     if (icount < 2)
      {      
     continue;     
     }
        // 条件4：联结数等于1   
    if (1!=DetectConnectivity(nnb) )
      {
      continue;  
     }
 // 条件5: 假设p2已标记删除，则令p2为背景，不改变p的联结数 
    Point p2=new Point(i-1,j);
     if (mark.indexOf(p2)!=-1) //如果在向量mark中找到点p2
     { 
        nnb[2] = 0; 
        if (1!=DetectConnectivity(nnb) ) 
        {   
          nnb[2] = 1; 
         continue; 
        }
         nnb[2] = 1; 
    }
 
// 条件6: 假设p4已标记删除，则令p4为背景，不改变p的联结数 
Point p4=new Point(i,j-1);
 if (mark.indexOf(p4)==-1) //如果p4没有标记将p点标记
     { 
     Point p=new Point(i,j);
      mark.add(p);
      IsModified=true;
      continue;
     } 

//如果p4 标记了，先把点p4变成0
     nnb[4]=0;
     if(1==DetectConnectivity(nnb))
     {//如果p的连接数没有改变；将p标记
      Point p=new Point(i,j);
      mark.add(p);
      IsModified=true;
     }
    
}
     }
 

       }   while (IsModified);  
